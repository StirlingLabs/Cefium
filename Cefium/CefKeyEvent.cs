namespace Cefium;

/// <summary>
/// Structure representing keyboard event information.
/// <c>cef_key_event_t</c>
/// </summary>
[PublicAPI, StructLayout(LayoutKind.Sequential)]
public struct CefKeyEvent {

  /// <summary>
  /// The type of keyboard event.
  /// </summary>
  public CefKeyEventType Type;

  /// <summary>
  /// Bit flags describing any pressed modifier keys. See
  /// cef_event_flags_t for values.
  /// </summary>
  public CefEventFlags Modifiers;

  /// <summary>
  /// The Windows key code for the key event. This value is used by the DOM
  /// specification. Sometimes it comes directly from the event (i.e. on
  /// Windows) and sometimes it's determined using a mapping function. See
  /// WebCore/platform/chromium/KeyboardCodes.h for the list of values.
  /// </summary>
  public int WindowsKeyCode;

  /// <summary>
  /// The actual key code genenerated by the platform.
  /// </summary>
  public int NativeKeyCode;

  /// <summary>
  /// Indicates whether the event is considered a "system key" event (see
  /// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
  /// This value will always be false on non-Windows platforms.
  /// </summary>
  public int IsSystemKey;

  /// <summary>
  /// The character generated by the keystroke.
  /// </summary>
  public char Character;

  /// <summary>
  /// Same as |character| but unmodified by any concurrently-held modifiers
  /// (except shift). This is useful for working out shortcut keys.
  /// </summary>
  public char UnmodifiedCharacter;

  /// <summary>
  /// True if the focus is currently on an editable field on the page. This is
  /// useful for determining if standard key events should be intercepted.
  /// </summary>
  public int FocusOnEditableField;

}
